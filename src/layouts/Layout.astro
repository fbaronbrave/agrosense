---
import i18next, { t } from "i18next";
import { HeadHrefLangs } from "astro-i18next/components";
import  SpeedInsights  from "@vercel/speed-insights/astro"

import "@/app.css";
import Header from "@/components/shared/Header.astro";
import Footer from "@/components/shared/Footer.astro";
import CircleAlert from "@/components/shared/icons/CircleAlert.astro";
import { cn } from "@/lib/utils";
import Close from "@/components/shared/icons/Close.astro";

interface Props {
  class?: string;
}

const { class: className } = Astro.props;
const dir = i18next.language === "ar" ? "rtl" : "ltr";
const isSpanish = i18next.language === "es";
const isEnglish = i18next.language === "en";
const isSpanishOrEnglish = isSpanish || isEnglish;
---

<!doctype html>
<html lang={i18next.language} dir={dir}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <HeadHrefLangs />
  </head>
  <body class="w-full h-full relative">
    <Header />
    <main class={cn("max-w-7xl mx-auto relative z-10 overflow-x-hidden home-agrosense", className)}>
      <slot />

      {
        !isSpanishOrEnglish && (
          <aside class="w-full px-8 box-border fixed bottom-10 z-50" id="aside-alert">
            <div
              class={cn(
                "mb-10 flex gap-4 w-full bg-white/70 backdrop-blur-md p-6 py-4 box-border max-w-5xl rounded-lg border border-primary shadow-md z-50 mx-auto",
                dir === "rtl"
                  ? "flex-row-reverse"
                  : "flex-col sm:flex-row lex-row"
              )}
            >
              <button class="absolute top-4 right-4" id="close-alert">
                <Close class="size-6 text-primary" />
              </button>
              <CircleAlert class="size-8 text-right text-primary mx-auto" />
              <p
                class={cn(
                  "text-pretty text-xs md:text-sm",
                  dir === "rtl" ? "text-left" : "text-left"
                )}
              >
                {t("warning.lang")}
              </p>
            </div>
          </aside>

          <script>
            const closeAlertButton = document.getElementById("close-alert");
            const asideAlert = document.getElementById("aside-alert");
            if (closeAlertButton) {
              closeAlertButton.addEventListener("click", () => {asideAlert?.remove()});
            }
          </script>
        )
      }
    </main>
    <Footer />
    <SpeedInsights />
  </body>
</html>
